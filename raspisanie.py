import pandas as pd
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import logging
import os
import signal

def shutdown_handler(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    application.stop()
    exit(0)

signal.signal(signal.SIGTERM, shutdown_handler)
signal.signal(signal.SIGINT, shutdown_handler)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ScheduleBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
        self.modes = {
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ": {
                "AR/VR": "ARVR.xlsx",
                "HITECH": "HITECH.xlsx",
                "AERO": "AERO.xlsx",
                "ROBO": "ROBO.xlsx",
                "IT": "IT.xlsx",
                "–¢—É—Ä–∏–∑–º": "TURISM.xlsx"
            
            },
            "–ê–≤—Ç–æ–±—É—Å—ã": "BUS.xlsx"
        }
        self.current_mode = None
        self.current_direction = None
        self.schedule = {}
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def show_main_menu(self, update: Update):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
        buttons = [["üöå –ê–≤—Ç–æ–±—É—Å—ã", "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]]
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=reply_markup
        )

    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            self.current_mode = None
            self.current_direction = None
            await self.show_main_menu(update)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    async def handle_mode(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ (–ê–≤—Ç–æ–±—É—Å—ã/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ)"""
        try:
            choice = update.message.text
            
            if '–∞–≤—Ç–æ–±—É—Å' in choice.lower():
                self.current_mode = "–ê–≤—Ç–æ–±—É—Å—ã"
                await self.handle_bus_direction(update, context)
            elif '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in choice.lower():
                self.current_mode = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                await self.show_directions(update)
            else:
                await self.show_main_menu(update)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_mode: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    async def show_directions(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            buttons = [
                ["AR/VR", "HITECH"],
                ["AERO", "ROBO"],
                ["IT", "–¢—É—Ä–∏–∑–º"],
                ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
            ]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await update.message.reply_text(
                "üè´ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_directions: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    def load_schedule(self, file_path):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(file_path):
                logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {}

            df = pd.read_excel(file_path, header=0, engine='openpyxl')
            schedule = {}
            
            for _, row in df.iterrows():
                try:
                    day = str(row['–î–ï–ù–¨ –ù–ï–î–ï–õ–ò']).strip().lower()
                    time = str(row['–í–†–ï–ú–Ø']).strip()
                    
                    if day not in schedule:
                        schedule[day] = []
                    
                    lessons = []
                    
                    # –ò—â–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "–ü:")
                    teacher_columns = [col for col in df.columns if str(col).startswith('–ü:')]
                    
                    if not teacher_columns:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ —Å "–ü:", –∏—â–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫—Ä–æ–º–µ –î–ï–ù–¨ –ù–ï–î–ï–õ–ò –∏ –í–†–ï–ú–Ø
                        teacher_columns = [col for col in df.columns if col not in ['–î–ï–ù–¨ –ù–ï–î–ï–õ–ò', '–í–†–ï–ú–Ø']]
                    
                    for col in teacher_columns:
                        teacher_name = str(col).replace('–ü:', '').strip()
                        subject = row[col]
                        if pd.notna(subject) and str(subject).strip():
                            lessons.append(f"{teacher_name}: {str(subject).strip()}")
                    
                    if lessons:
                        schedule[day].append({
                            'time': time,
                            'lessons': lessons
                        })
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue
            
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            week_days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞']
            for day in week_days:
                if day not in schedule:
                    schedule[day] = []
            
            return schedule
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return {}

    def load_bus_schedule(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤"""
        try:
            if not os.path.exists(file_path):
                logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {}

            bus_schedule = {
                "–ü—Ä—è–º–æ–π": {},
                "–û–±—Ä–∞—Ç–Ω—ã–π": {}
            }
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä—è–º–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–õ–∏—Å—Ç1)
            df_direct = pd.read_excel(file_path, sheet_name="–õ–∏—Å—Ç1", header=0, engine='openpyxl')
            for _, row in df_direct.iterrows():
                stop = str(row['–û—Å—Ç–∞–Ω–æ–≤–∫–∏']).strip()
                times = [str(row[col]).strip() for col in ['–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.1', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.2'] 
                         if col in row and pd.notna(row[col])]
                bus_schedule["–ü—Ä—è–º–æ–π"][stop] = times
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–õ–∏—Å—Ç2)
            df_reverse = pd.read_excel(file_path, sheet_name="–õ–∏—Å—Ç2", header=0, engine='openpyxl')
            for _, row in df_reverse.iterrows():
                stop = str(row['–û—Å—Ç–∞–Ω–æ–≤–∫–∏']).strip()
                times = [str(row[col]).strip() for col in ['–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.1', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.2'] 
                         if col in row and pd.notna(row[col])]
                bus_schedule["–û–±—Ä–∞—Ç–Ω—ã–π"][stop] = times
            
            return bus_schedule
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤: {e}")
            return {}

    async def handle_bus_direction(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–∞"""
        try:
            buttons = [["–ü—Ä—è–º–æ–π", "–û–±—Ä–∞—Ç–Ω—ã–π"], ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–∞:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bus_direction: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    async def handle_bus_schedule(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–æ–≤"""
        try:
            text = update.message.text
            
            if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
                await self.show_main_menu(update)
                return
            
            if text not in ["–ü—Ä—è–º–æ–π", "–û–±—Ä–∞—Ç–Ω—ã–π"]:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return
            
            bus_schedule = self.load_bus_schedule(self.modes["–ê–≤—Ç–æ–±—É—Å—ã"])
            direction_schedule = bus_schedule.get(text, {})
            
            if not direction_schedule:
                await update.message.reply_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            response = f"üöå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({text} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ):\n\n"
            response += "–û—Å—Ç–∞–Ω–æ–≤–∫–∞       | 1 –≥—Ä—É–ø–ø–∞ | 2 –≥—Ä—É–ø–ø–∞ | 3 –≥—Ä—É–ø–ø–∞\n"
            response += "-----------------------------------------------\n"
            
            for stop, times in direction_schedule.items():
                times_formatted = [t.split()[0] if pd.notna(t) else "-" for t in times]
                response += f"{stop.ljust(15)} | {times_formatted[0].ljust(8)} | {times_formatted[1].ljust(8)} | {times_formatted[2]}\n"
            
            await update.message.reply_text(f"<pre>{response}</pre>", parse_mode='HTML')
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            buttons = [["–ü—Ä—è–º–æ–π", "–û–±—Ä–∞—Ç–Ω—ã–π"], ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bus_schedule: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    async def handle_direction(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            text = update.message.text
            
            if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
                await self.show_main_menu(update)
                return
            
            if text not in self.modes["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]:
                await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Ç")
                await self.show_directions(update)
                return
            
            self.current_direction = text
            file_path = self.modes["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"][text]
            self.schedule = self.load_schedule(file_path)
            
            if not self.schedule:
                await update.message.reply_text(f"‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await self.show_directions(update)
                return
            
            await self.show_days(update)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_direction: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    async def show_days(self, update: Update):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            buttons = [
                ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫"],
                ["–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥"],
                ["–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
            ]
            reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await update.message.reply_text(
                f"üìÖ {self.current_direction}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_days: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    async def handle_day(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        try:
            text = update.message.text.lower()
            
            if text == "‚Ü©Ô∏è –Ω–∞–∑–∞–¥":
                await self.show_directions(update)
                return
                
            day = text
            if day not in self.schedule:
                await update.message.reply_text("‚ùå –¢–∞–∫–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
                return
                
            if not self.schedule[day]:
                await update.message.reply_text(f"üì≠ –ù–∞ {day.capitalize()} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç")
                return
                
            response = f"üìÖ {self.current_direction}. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.capitalize()}:\n\n"
            
            for slot in self.schedule[day]:
                response += f"üïí {slot['time']}\n"
                response += "\n".join(f"üë®‚Äçüè´ {lesson}" for lesson in slot['lessons'])
                response += "\n\n"
                
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_day: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    async def handle_message(self, update: Update, context: CallbackContext):
        """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            
            if text in ["üöå –ê–≤—Ç–æ–±—É—Å—ã", "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]:
                await self.handle_mode(update, context)
            elif text in ["AR/VR", "HITECH", "AERO", "ROBO", "IT", "–¢—É—Ä–∏–∑–º"]:
                await self.handle_direction(update, context)
            elif text in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]:
                await self.handle_day(update, context)
            elif text in ["–ü—Ä—è–º–æ–π", "–û–±—Ä–∞—Ç–Ω—ã–π", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
                if self.current_mode == "–ê–≤—Ç–æ–±—É—Å—ã":
                    await self.handle_bus_schedule(update, context)
                else:
                    await self.show_main_menu(update)
            else:
                await self.show_main_menu(update)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            application = Application.builder().token("7590558054:AAGdGbsaTfUqplrPF93XRktXRRCR4PTEYzA").build()
            
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            application.run_polling()
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        bot = ScheduleBot()
        bot.run()
    except Exception as e:
        print(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
